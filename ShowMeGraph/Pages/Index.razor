@page "/"
@using QuikGraph;
@using ShowMeGraph.Data;
@using ShowMeGraph.Data.Serialization;
@using ShowMeGraph.Layout.ForceBased;
@using ShowMeGraph.Shared.Dialogs;
@using ShowMeGraph.Shared.Properties

@using Edge = Data.UiEdge;

@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="d-flex flex-column h-100" style="overflow-x: hidden">
    <MudPaper Class="d-flex gap-1 rounded-0"
              Outlined="true"
              Elevation="8">
        <Toolbar Tools="_viewModel.Tools"
                 Algorithms="_viewModel.Algorithms" />
        <MudMenu Icon="@CustomIcons.Outlined.More">
            <MudMenuItem OnClick="MenuItemDownload_Click">Download</MudMenuItem>
            <MudMenuItem OnClick="MenuItemUpload_Click">Upload</MudMenuItem>
        </MudMenu>
    </MudPaper>
    <MudPaper Class="d-flex flex-1 flex-grow-1 gap-2 rounded-0"
              Style="overflow-y: hidden"
              Elevation="0">
        <MudPaper Class="px-4 py-2 rounded-0 shadow"
                  Style="overflow-y: scroll"
                  MinWidth="300px"
                  Width="20%"
                  Elevation="0">
            <LayoutOptions Options="_viewModel.GraphLayout.Options"
                           RenderTarget="_graphView.RenderTarget" />
        </MudPaper>
        <div class="d-flex flex-1">
            <GraphView @ref="_graphView"
                       Layout="_viewModel.GraphLayout"
                       LayoutInfo="_viewModel.GraphLayoutInfo"
                       RenderInfo="_viewModel.GraphRenderInfo"
                       AllowPanning="_viewModel.AllowPanning"
                       AllowNodeDragging="_viewModel.AllowDragging"
                       OnNodeHoverEnter="_viewModel.OnNodeHoverEnter"
                       OnNodeHoverLeave="_viewModel.OnNodeHoverLeave"
                       OnNodeClicked="_viewModel.OnNodeClicked"
                       OnEdgeHoverEnter="_viewModel.OnEdgeHoverEnter"
                       OnEdgeHoverLeave="_viewModel.OnEdgeHoverLeave"
                       OnEdgeClicked="_viewModel.OnEdgeClicked"
                       OnWhitespaceClicked="_viewModel.OnWhitespaceClicked" />
        </div>
        <MudPaper Class="px-4 py-2 rounded-0 shadow"
                  Style="overflow-y: scroll"
                  MinWidth="300px"
                  Width="20%"
                  Elevation="0">
            <PropertiesInspector InspectedObject="_viewModel.SelectionManager.SelectedObjects.FirstOrDefault() as object ?? _viewModel.Graph" />
        </MudPaper>
    </MudPaper>

    <AnimationPlayer Animation="_viewModel.AnimationManager.Animation" />
</div>

@code
{
    private IndexViewModel _viewModel = default!;

    private GraphView _graphView = default!;

    private object? _obj;

    protected override void OnInitialized()
    {
        _viewModel = new();
        _viewModel.StateHasChanged += (_, _) => StateHasChanged();

        var nodes = new UiVertex[] { new(), new(), new(), new(), };

        _viewModel.Graph.AddVertexRange(nodes);
        _viewModel.Graph.AddEdge(new(nodes[0], nodes[1]));
        _viewModel.Graph.AddEdge(new(nodes[1], nodes[2]));
        _viewModel.Graph.AddEdge(new(nodes[2], nodes[3]));
        _viewModel.Graph.AddEdge(new(nodes[3], nodes[0]));

        _obj = nodes[0];
    }

    private async void MenuItemDownload_Click()
    {
        using var stream = new MemoryStream();
        using var writer = new StreamWriter(stream);

        UiGraphUnionSerializer.Serialize(writer, _viewModel.Graph);

        var fileName = $"graph.gph";
        stream.Position = 0;
        using var streamRef = new DotNetStreamReference(stream: stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

        stream.Close();
    }

    private async void MenuItemUpload_Click()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<UploadFileDialog>("Upload File", options);

        var file = await dialog.GetReturnValueAsync<IBrowserFile>();

        if (file is null)
        {
            return;
        }

        using var stream = file.OpenReadStream();

        try
        {
            var memoryStream = new MemoryStream();
            var buffer = new byte[1024];
            var bytesRead = 0;

            do
            {
                bytesRead = await stream.ReadAsync(buffer);
                memoryStream.Write(buffer, 0, bytesRead);
            } while (bytesRead > 0);

            memoryStream.Position = 0;
            using var reader = new StreamReader(memoryStream);

            UiGraphUnionSerializer.Deserialize(reader, _viewModel.Graph);
            _viewModel.GraphLayout.SetUp(_viewModel.GraphLayoutInfo);

            memoryStream.Close();
        }
        catch
        {
            Snackbar.Add("Unexpected Error!", Severity.Error);
        }

        stream?.Close();
    }
}